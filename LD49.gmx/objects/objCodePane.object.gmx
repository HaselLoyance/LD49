<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objButton</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

glyph_scale = 7//10
font_glyph_a=15


instance_create(0, 0, objRandomEvents)
    
// Credit: https://github.com/dtinth/comic-mono-font
font_n = 'ComicMono.ttf'
if objWorld.is_web
{
    font = ftCodeWeb
    glyph_scale = 1
}
else
    font = font_add(font_n, floor(font_glyph_a), false, false, 32, 128)
draw_set_font(font)
draw_set_valign(fa_top)
draw_set_halign(fa_left)
glyph_width = string_width('M')
glyph_height = string_height('M')
font = -1

width = objHideButton.w
height = 520

code_width =(800 div glyph_width)
code_height =(720 - 50 - 150) div glyph_height

cursor_x = 0
cursor_y = 0
y = 200
x = 0


buffer = -1
color = -1
allowed_keys = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()-=_+[]{};':" +'"' +",./&lt;&gt;?\|`~"
token_split_chars = " !@#$%^&amp;*()-=+[]{};':" + '"' +",./&lt;&gt;?\|`~"
error_lines = ds_list_create()



ps = part_system_create()
emitter = part_emitter_create(ps)
part = part_type_create()
part_type_shape(part, pt_shape_star);
part_type_direction(part, 0, 360, 0, 0);
part_type_blend(part, true);
part_type_speed(part, 2,5,-0.03, 0)
part_type_orientation(part, 0, 360, -1, 0,0)

char_added = false
char_added_x = 0
char_added_y = 0

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tasks
task_1 = ds_list_create()
//ds_list_add(task_1, 'def main():')
ds_list_add(task_1, 'print("Hello, World!")')
//ds_list_add(task_1, 'main()')

task_2 = ds_list_create()
ds_list_add(task_2, 'x = input()')
ds_list_add(task_2, 'y = input()')
ds_list_add(task_2, 'print(x, y)')
ds_list_add(task_2, 'temp = x')
ds_list_add(task_2, 'x = y')
ds_list_add(task_2, 'y = temp')
ds_list_add(task_2, 'print(x, y)')

task_3 = ds_list_create()

ds_list_add(task_3, 'for i in range(1, 101):')
ds_list_add(task_3, '  fizz = "Fizz" if i % 3 == 0 else ""')
ds_list_add(task_3, '  buzz = "Buzz" if i % 5 == 0 else ""')
ds_list_add(task_3, '  print(f"{fizz}{buzz}" or i)')

task_4 = ds_list_create()
ds_list_add(task_4, 'import math')
ds_list_add(task_4, 'def pythagorean_triplet(n):')
ds_list_add(task_4, '  for b in range(n):')
ds_list_add(task_4, '    for a in range(1, b):')
ds_list_add(task_4, '      c = math.sqrt(a * a + b * b)')
ds_list_add(task_4, '      if c % 1 == 0:')
ds_list_add(task_4, '        print(a, b, int(c))')
ds_list_add(task_4, 'pythagorean_triplet(12)')

active_task = -1
if objTaskPane.temp_task ==1
    active_task = task_1
if objTaskPane.temp_task ==2
    active_task = task_2
if objTaskPane.temp_task ==3
    active_task = task_3
if objTaskPane.temp_task ==4
    active_task = task_4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(buffer, ds_type_grid)
    ds_grid_destroy(buffer)
if ds_exists(error_lines, ds_type_list)
    ds_list_destroy(error_lines)
ds_list_destroy(task_1)
ds_list_destroy(task_2)
ds_list_destroy(task_3)
ds_list_destroy(task_4)

part_type_destroy(part)
part_emitter_destroy(ps, emitter)
part_system_destroy(ps)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
width = objHideButton.w
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if buffer == -1 or instance_number(objPopUp) &gt; 0
{
    keyboard_lastchar = ''
    exit;
}

if click 
{
mx = mouse_x
my = mouse_y

m_glyph_x = floor((mx - (x+objWorld.shift_x)) / (glyph_width * glyph_scale))
m_glyph_y = floor((my - (y+objWorld.shift_y)) / (glyph_height * glyph_scale))
cursor_x = min(code_width-1, max(0, m_glyph_x))
cursor_y = min(code_height-1, max(0, m_glyph_y))
}

// clean up the ds and fill out spaces correctly
for (var j = 0; j &lt; code_height; j++)
{
    in_text = false
    for (var i = code_width - 1; i &gt;= 0; i--)
    {
        
        c = buffer[# i,j]
        if c == '' or c == ' '
        {
            if not in_text
            {
                buffer[# i,j] = ''
            }
            else
            {
                buffer[# i,j] = ' '
            }
        }
        else
        {
            in_text = true
        }
    }
}

if keyboard_check_pressed(vk_space)
{
     dialog = instance_create(0,0,objPopUp)
     event_user(0)
    with dialog
    {
        type = 8
        text = "Spacebar functionality was disabled in#v4.7.9 due to CVE-2021-40444."
        title = "Notification"
    }
}

for (var i = 1; i &lt;= string_length(allowed_keys); i++)
{
    k = string_char_at(allowed_keys, i)
    
    if keyboard_lastchar == k
    {
     event_user(0)
        //don't accept characters soemtimes
        if random(100) &lt; 50
            break
        c = keyboard_lastchar
        if c == '#'
            c = "'"
        if c == '~'
            c = '"'
        buffer[# cursor_x, cursor_y] = c
        char_added = true
        char_added_x = cursor_x
        char_added_y = cursor_y
        
        keyboard_lastchar = ''
        
        cursor_x += 1
        cursor_x = min(code_width-1, max(0, cursor_x))
        
        objWorld.btn_notification_count += 1
        if not objWorld.stop_btn_notif
        {
            
            dialog = instance_create(0,0,objPopUp)
            
            if objWorld.btn_notification_count &lt; 3
            {
            with dialog
            {
                type = 6
                text = "You have just pressed '" + other.c + "' character."
                title = "Notification"
            }
            }
            else
            {
            with dialog
            {
                type = 7
                text = "You have just pressed '" + other.c + "' character.#Would you like to receive more#notifications in the future?"
                title = "Notification"
            }
            }
        }
    }
}

if keyboard_check_pressed(vk_delete)
{
     event_user(0)
    for (var  i = cursor_x; i &lt; code_width; i++)
    {
        if i + 1 &gt;= code_width
            c = ''
        else
            c = buffer[# i+1, cursor_y]
        buffer[# i, cursor_y] = c
    }
}

if keyboard_check_pressed(vk_backspace) and cursor_x &gt;= 1
{
     event_user(0)
    for (var  i = cursor_x; i &lt; code_width; i++)
    {
        if i + 1 == code_width
            c = ''
        else
            c = buffer[# i, cursor_y]
        buffer[# i - 1, cursor_y] = c
    }
    
    cursor_x -=1
}

if keyboard_check_pressed(vk_enter)
{
     event_user(0)
    if  objWorld.enter_bought
    {
    //reverse current line
    pos = 0
    for (var  i = code_width -1; i &gt;= 0; i--)
    {
        c = buffer[# i, cursor_y]
        if c != ''
        {
            pos = i
            break
        }
    }
    str = ds_list_create()
    for (var i = 0; i &lt;= pos; i++)
    {
        ds_list_add(str, buffer[#pos - i, cursor_y])
    }
    
    for (var i = 0; i &lt;= pos; i++)
    {
        buffer[#i, cursor_y] = str[| i]
    }
    ds_list_destroy(str)
    
    
    if cursor_y &gt;= 1
    {
    // get prev line pos
    pos = 0
    cursor_y -= 1
    
    for (var  i = code_width -1; i &gt;= 0; i--)
    {
        c = buffer[# i, cursor_y]
        if c != ''
        {
            pos = i
            break
        }
    }
    
    cursor_x = pos 
    }
    }
    else
    {
      dialog = instance_create(0,0,objPopUp)     
    with dialog
    {
        type = 9
        text = "Would you like to buy Enter key#functionality just for $24.99/mo?"
        title = "Paid feature"
    }
    }
}


//validate lines
task_line = 0
ds_list_clear(error_lines)

if active_task == -1
    exit

valid_lines = 0
for (var i = 0; i &lt; code_height; i++)
{

    line = ''
    for (var j = 0; j &lt; code_width; j++)
    {
        c = buffer[# j,i]
        if c != ''
            line += c
        else
            break
    }
    
    if string_length(line) == 0 continue
    valid_lines += 1
    if task_line &gt; ds_list_size(active_task)
        ds_list_add(error_lines, i)
    else if (line != active_task[| task_line])
    {
        ds_list_add(error_lines, i)
    }
    
    task_line += 1
}

if valid_lines != ds_list_size(active_task)
{
ds_list_add(error_lines, -1)
}

if ds_list_size(error_lines) == 0
{
    with objTaskPane event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>afg = choose(sndKey, sndKey1, sndKey2)

audio_sound_pitch(afg, 1 + random_range(-10,10) / 100)
audio_play_sound(afg, 0, false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(make_colour_rgb(40,44,52))
draw_rectangle(x+ objWorld.shift_x,y + objWorld.shift_y, x+width+ objWorld.shift_x, y+height+ objWorld.shift_y, false)


chx = 0 + cursor_x * glyph_width * glyph_scale+ objWorld.shift_x
chy = 200+ cursor_y * glyph_height * glyph_scale+ objWorld.shift_y


draw_set_color(make_colour_rgb(150,164,181))

if buffer == -1
{
    draw_set_font(ftComicSans30)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
    draw_text_ext(chx + width/2, chy + 520/2, "Using the nightly build of VSCode! Please attempt to create a new file and contact our customer desk once something fails.", 80, 660)
    exit;
}



if font == -1
{
font = font_add(font_n, floor(glyph_scale * font_glyph_a), false, false, 32, 128)
}

draw_set_font(font)
if objWorld.is_web
{
draw_set_font(ftCodeWeb)

}
draw_set_halign(fa_left)
draw_set_valign(fa_top)
tok_counter = 0
def_col = make_colour_rgb(150,164,181)
prev_tsc = false
for (var i = 0; i &lt; code_height; i++)
{

    yc = y + objWorld.shift_y + i * glyph_height * glyph_scale
    if yc + glyph_height * glyph_scale &lt;= 0 or yc + glyph_height * glyph_scale &gt;= y + objWorld.shift_y + height
        continue
        
    // if error line, turn bg red
    if ds_list_find_index(error_lines, i) != -1// and i != cursor_y
    {
          draw_set_color(make_colour_rgb(142,56,63))
          draw_rectangle(
          objWorld.shift_x,
          yc,
          objWorld.shift_x + 800,
          yc + glyph_height * glyph_scale,
          false          
          )
    }
    
    l = 0
    for (var j = 0; j &lt; code_width; j++)
    {
        
        c = buffer[# j,i]
        if c != ''
            l+=1
        col = color[| (tok_counter mod ds_list_size(color))]
        
        found_tsc = false
        for (var k = 1; k &lt;= string_length(token_split_chars); k++)
        {
            tsc = string_char_at(token_split_chars, k)
            if tsc == c
            {
                col = def_col
                if not prev_tsc
                    tok_counter += 1
                prev_tsc = true
                found_tsc = true
                break
            }
        }
        if not found_tsc
        {
            prev_tsc = false
        }
        draw_set_color(col)
        xc = x + objWorld.shift_x + j * glyph_width * glyph_scale

        if c == ''
            continue
        
        // skip drawing outside of the main code pane
        if xc + glyph_width * glyph_scale &lt;= 0 or xc + glyph_width * glyph_scale &gt;= x + objWorld.shift_x + width
            continue
        
        if char_added and char_added_x == j and char_added_y == i
        {
            char_added = false
            part_type_size(part, 0.07*glyph_scale, 0.13*glyph_scale, -0.03*(1/glyph_scale), 0);
            part_type_color1(part, col);
            part_emitter_region(ps, emitter, xc, xc + glyph_width * glyph_scale, yc, yc + glyph_height * glyph_scale, ps_shape_ellipse, ps_distr_gaussian)
            part_emitter_burst(ps, emitter, part, 8)
        }
        draw_text(
        xc,
        yc, 
        buffer[# j,i]
        
        )
    }
    if l &gt; 0
    {
    tok_counter+=1
    prev_tsc = true
    }
}

draw_set_color(make_colour_rgb(150,164,181))
if chx+ glyph_width * glyph_scale &lt; x + objWorld.shift_x + width
{
draw_rectangle(chx,
chy,
chx + glyph_width * glyph_scale,
chy + glyph_height * glyph_scale,
false)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objWorld.is_web
{
if objWorld.lock_shift exit
objWorld.shift_y += 5
exit
}
glyph_scale -= 0.4
glyph_scale = max(0.5, glyph_scale)
if font_exists(font)
    font_delete(font)
font = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if objWorld.is_web
{
if objWorld.lock_shift exit
objWorld.shift_y -= 5
exit
}


glyph_scale += 0.4
glyph_scale = min(10.0, glyph_scale)
if font_exists(font)
    font_delete(font)
font = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
